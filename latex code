\documentclass[a4paper,12pt]{article}
\usepackage{amsmath, amssymb, geometry, graphicx, hyperref, booktabs}
\geometry{margin=1in}

\title{\textbf{FPTAS for the 0/1 Knapsack Problem}}
\author{\textbf{Team Members:} \\ Jiang Yunfan/1336570 \\ Yang Le/1335786 \\ Ni Xing/1336568}
\date{}

\begin{document}

\maketitle

\begin{abstract}
This report investigates the classical combinatorial optimization problem---the 0/1 Knapsack Problem---and implements the Fully Polynomial Time Approximation Scheme (FPTAS) proposed by David Pisinger. By narrowing the solution space to within a user-defined error tolerance, FPTAS achieves a balance between computational efficiency and solution accuracy. This report provides a detailed explanation of the problem background, the implementation steps of FPTAS, and presents experimental comparisons between standard dynamic programming and FPTAS. The results demonstrate that FPTAS significantly improves efficiency for large-scale instances while maintaining near-optimal solution quality.
\end{abstract}

\section{Introduction}
The 0/1 Knapsack Problem is a fundamental combinatorial optimization problem where items, each with a weight and a value, must be selected to maximize total value without exceeding a given capacity. The problem is NP-hard, making it computationally expensive for large instances. Exact methods like dynamic programming offer solutions but struggle with scalability. The Fully Polynomial Time Approximation Scheme (FPTAS) offers a trade-off, providing near-optimal solutions efficiently. This report focuses on the FPTAS approach, its implementation, and experimental results.

\section{Problem Description}
The 0/1 Knapsack Problem involves:
\begin{itemize}
    \item Items, each with weight $w_i$ and value $v_i$.
    \item A knapsack with maximum capacity $C$.
\end{itemize}
The objective is to maximize total value without exceeding the capacity. Mathematically:
\begin{align*}
    \text{Maximize:} & \quad \sum_{i=1}^n v_i x_i, \\
    \text{Subject to:} & \quad \sum_{i=1}^n w_i x_i \leq C, \quad x_i \in \{0, 1\}.
\end{align*}

\section{Related Works}
Significant contributions to the Knapsack Problem include:
\begin{itemize}
    \item \textbf{Dantzig (1957):} Introduced a discrete-variable optimization framework.
    \item \textbf{Martello \& Toth (1990):} Developed foundational algorithms for exact solutions.
    \item \textbf{Pisinger (2005):} Proposed the FPTAS for large-scale knapsack instances.
\end{itemize}
These studies highlight the importance of balancing accuracy and computational efficiency, particularly for NP-hard problems.

\section{Methodology and Models}
\subsection{0/1 Knapsack Problem Overview}
Given $n$ items, each with weight $w_i$ and value $v_i$, the goal is to maximize total value without exceeding the knapsack capacity $C$:
\begin{align*}
    \text{Maximize:} & \quad \sum_{i=1}^n v_i x_i, \\
    \text{Subject to:} & \quad \sum_{i=1}^n w_i x_i \leq C, \quad x_i \in \{0, 1\}.
\end{align*}

\subsection{Fully Polynomial-Time Approximation Scheme (FPTAS)}
FPTAS, proposed by David Pisinger (1999), is an efficient approximation method for solving the 0/1 Knapsack Problem. By introducing a controlled error parameter $\varepsilon$, FPTAS guarantees that the solution is within $(1 + \varepsilon)$ of the optimal solution.

\subsection{Steps of FPTAS}
\begin{enumerate}
    \item \textbf{Error Tolerance ($\varepsilon$):} Introduce a small error parameter $\varepsilon > 0$ to balance accuracy and runtime.
    \item \textbf{Value Scaling:} Scale item values using:
    \begin{align*}
        K = \frac{\varepsilon \cdot v_{\text{max}}}{n}, \quad v'_i = \lfloor \frac{v_i}{K} \rfloor.
    \end{align*}
    \item \textbf{Dynamic Programming:} Apply dynamic programming on scaled values.
    \item \textbf{Solution Restoration:} Restore the solution to the original value space:
    \begin{align*}
        \text{Final Solution} = \text{dp\_result} \cdot K.
    \end{align*}
\end{enumerate}

\subsection{State Reduction Optimization}
State Reduction Optimization eliminates redundant states during dynamic programming, retaining only Pareto-optimal states.
\begin{itemize}
    \item \textbf{Sorting States:} Sort by weight in ascending order.
    \item \textbf{Filtering Dominated States:} Retain states with strictly increasing values.
\end{itemize}

\section{Experimental Results}
\subsection{Experimental Setup}
Experiments were conducted on datasets with varying item numbers ($n = 50, 100, 500, 1000$) and knapsack capacities ($C = [50, 1000]$). Methods compared:
\begin{itemize}
    \item Standard Dynamic Programming.
    \item FPTAS with $\varepsilon = 0.1$ and $\varepsilon = 0.2$.
    \item FPTAS with State Reduction.
\end{itemize}

\subsection{Results Analysis}
\begin{table}[h!]
    \centering
    \begin{tabular}{cccccc}
        \toprule
        Item Count ($n$) & Method & Error (\%) & Runtime (s) & Memory (MB) \\
        \midrule
        50 & Dynamic Programming & 0 & 0.02 & 5 \\
        50 & FPTAS ($\varepsilon = 0.1$) & 4.5 & 0.01 & 3 \\
        50 & FPTAS + State Reduction & 4.3 & 0.008 & 2 \\
        500 & FPTAS ($\varepsilon = 0.1$) & 4.8 & 0.4 & 20 \\
        500 & FPTAS + State Reduction & 4.5 & 0.25 & 15 \\
        \bottomrule
    \end{tabular}
    \caption{Experimental Results Summary}
    \label{tab:results}
\end{table}

\section{Conclusion}
This report presents FPTAS for solving the 0/1 Knapsack Problem. By leveraging value scaling and approximation, FPTAS achieves near-optimal solutions efficiently, making it suitable for large-scale problems. Experimental results confirm its scalability and accuracy, validating its application in domains such as finance, logistics, and resource management.

\section*{References}
\begin{itemize}
    \item David Pisinger. A Fully Polynomial Time Approximation Scheme for the 0-1 Knapsack Problem. \emph{European Journal of Operational Research}, 1999.
    \item Hans Kellerer, Ulrich Pferschy. A New Fully Polynomial Time Approximation Scheme for the Knapsack Problem. \emph{Journal of Combinatorial Optimization}, 1999.
\end{itemize}

\end{document}
